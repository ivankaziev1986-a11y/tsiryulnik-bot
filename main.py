import asyncio
import logging
import os
from typing import Dict, List

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiohttp import web

# ========= –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è =========
BOT_TOKEN = "8149079701:AAEFH-usiimRlsH0FYFqIeTVRhLCTwdSL9E"
ADMIN_CHAT_ID = -4956523911
BOT_USERNAME = "tsiryulnik_feedback_bot"

# ========= –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tsiryulnik-bot")

# ========= –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ =========
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ========= –î–∞–Ω–Ω—ã–µ —Å–∞–ª–æ–Ω–æ–≤ =========
SALONS: Dict[str, Dict[str, str]] = {
    "s1": {
        "name": "–õ–æ–º–æ–Ω–æ—Å–æ–≤–∞, 85/1",
        "yandex": "https://yandex.ru/maps/-/CLbM5BiA",
        "gis": "https://go.2gis.com/U9V8N",
    },
    "s2": {
        "name": "–ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞, 14",
        "yandex": "https://yandex.ru/maps/-/CLbMBIyc",
        "gis": "https://go.2gis.com/s3pVH",
    },
    "s3": {
        "name": "–ú–∏—Ä–∞, 8",
        "yandex": "https://yandex.ru/maps/-/CLbMB4YC",
        "gis": "https://go.2gis.com/PJtRI",
    },
}
VK_LINK = "https://vk.com/salonseverodvinsk"

# ========= –°–æ—Å—Ç–æ—è–Ω–∏—è =========
class Flow(StatesGroup):
    feedback_type = State()   # 'negative' | 'positive'
    salon = State()           # 's1' | 's2' | 's3'
    master_info = State()     # –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞
    description = State()     # –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) + (–æ–ø—Ü.) –º–µ–¥–∏–∞
    phone = State()           # –≤–≤–æ–¥/—à–∞—Ä–∏–Ω–≥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å

# ========= –ö–Ω–æ–ø–∫–∏ / UI =========
def action_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É", callback_data="type:negative")
    kb.button(text="–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤", callback_data="type:positive")
    kb.adjust(1)
    return kb.as_markup()

def salons_kb():
    kb = InlineKeyboardBuilder()
    for key, s in SALONS.items():
        kb.button(text=s["name"], callback_data=f"salon:{key}")
    kb.adjust(1)
    return kb.as_markup()

def praise_links_kb(salon_key: str):
    s = SALONS[salon_key]
    kb = InlineKeyboardBuilder()
    kb.button(text="üü° –Ø–Ω–¥–µ–∫—Å", url=s["yandex"])
    kb.button(text="üü¢ 2–ì–ò–°", url=s["gis"])
    kb.button(text="üîµ VK", url=VK_LINK)
    kb.button(text="–ì–æ—Ç–æ–≤–æ, –æ—Å—Ç–∞–≤–∏–ª(–∞)", callback_data="praise:done")
    kb.adjust(1)
    return kb.as_markup()

def contact_share_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)],
            [KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
        selective=True,
    )

# ========= –•–µ–ª–ø–µ—Ä—ã =========
async def admin_log(text: str):
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(ADMIN_CHAT_ID, text)
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –≥—Ä—É–ø–ø—É: %s", e)

def get_username(u) -> str:
    return f"@{u.username}" if getattr(u, "username", None) else f"id:{u.id}"

# ========= –°—Ç–∞—Ä—Ç =========
@dp.message(CommandStart())
async def on_start(message: Message, state: FSMContext):
    """
    1) –°–Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏–µ (–ñ–∞–ª–æ–±–∞/–û—Ç–∑—ã–≤)
    2) –ó–∞—Ç–µ–º –≤—ã–±–æ—Ä —Å–∞–ª–æ–Ω–∞ (—É—á–∏—Ç—ã–≤–∞–µ–º deep-link /start s1|s2|s3)
    """
    await state.clear()
    payload = message.text.split(maxsplit=1)
    if len(payload) == 2 and payload[1].strip() in SALONS:
        await state.update_data(salon=payload[1].strip())

    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=action_kb())
    await state.set_state(Flow.feedback_type)

@dp.callback_query(Flow.feedback_type, F.data.startswith("type:"))
async def on_pick_type(cb: CallbackQuery, state: FSMContext):
    typ = cb.data.split(":", 1)[1]  # 'negative' / 'positive'
    await state.update_data(feedback_type=typ)

    data = await state.get_data()
    preselected = data.get("salon")

    if preselected:
        if typ == "positive":
            await cb.message.edit_text(
                f"–°–∞–ª–æ–Ω: <b>{SALONS[preselected]['name']}</b>\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è –æ—Ç–∑—ã–≤–∞:",
                reply_markup=praise_links_kb(preselected),
                disable_web_page_preview=True,
            )
            await admin_log(
                f"üëç –ü–æ—Ö–≤–∞–ª–∞\n–°–∞–ª–æ–Ω: {SALONS[preselected]['name']}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_username(cb.from_user)}"
            )
        else:
            await cb.message.edit_text(
                "–£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞."
            )
            await state.set_state(Flow.master_info)
    else:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω:", reply_markup=salons_kb())
        await state.set_state(Flow.salon)

    await cb.answer()

@dp.callback_query(Flow.salon, F.data.startswith("salon:"))
async def on_pick_salon(cb: CallbackQuery, state: FSMContext):
    salon_key = cb.data.split(":", 1)[1]
    await state.update_data(salon=salon_key)
    data = await state.get_data()
    typ = data.get("feedback_type")

    if typ == "positive":
        await cb.message.edit_text(
            f"–°–∞–ª–æ–Ω: <b>{SALONS[salon_key]['name']}</b>\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è –æ—Ç–∑—ã–≤–∞:",
            reply_markup=praise_links_kb(salon_key),
            disable_web_page_preview=True,
        )
        await admin_log(
            f"üëç –ü–æ—Ö–≤–∞–ª–∞\n–°–∞–ª–æ–Ω: {SALONS[salon_key]['name']}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_username(cb.from_user)}"
        )
    else:
        await cb.message.edit_text(
            "–£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞."
        )
        await state.set_state(Flow.master_info)

    await cb.answer()

# ========= –í–µ—Ç–∫–∞: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ =========
@dp.callback_query(F.data == "praise:done")
async def on_praise_done(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    salon_key = data.get("salon")
    salon_name = SALONS[salon_key]["name"] if salon_key else "‚Äî"
    await admin_log(
        "üëç –ü–æ—Ö–≤–∞–ª–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞)\n"
        f"–°–∞–ª–æ–Ω: {salon_name}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_username(cb.from_user)}"
    )
    await cb.message.edit_text("–°–ø–∞—Å–∏–±–æ! –≠—Ç–æ –æ—á–µ–Ω—å –ø–æ–º–æ–≥–∞–µ—Ç —Å–∞–ª–æ–Ω—É üíà")
    await state.clear()
    await cb.answer()

# ========= –í–µ—Ç–∫–∞: –ñ–∞–ª–æ–±–∞ =========
@dp.message(Flow.master_info)
async def on_master_info(message: Message, state: FSMContext):
    """
    –°–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥: –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ò–õ–ò —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞.
    –î–∞–ª–µ–µ ‚Äî —Å—Ä–∞–∑—É –æ–ø–∏—Å–∞–Ω–∏–µ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –±–µ–∑ —à–∞–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –±–µ–∑ —Å–ª–æ–≤–∞ ¬´–ì–æ—Ç–æ–≤–æ¬ª.
    """
    info = (message.text or "").strip()
    await state.update_data(master_info=info)

    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∏—Ç—É–∞—Ü–∏—é –≤ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö. "
        "–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)."
    )
    await state.set_state(Flow.description)

@dp.message(Flow.description)
async def on_description(message: Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ + (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –æ–¥–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–µ,
    —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ ¬´–ì–æ—Ç–æ–≤–æ¬ª).
    """
    desc = (message.caption or message.text or "").strip()
    media = None
    if message.photo:
        media = f"photo:{message.photo[-1].file_id}"
    elif message.video:
        media = f"video:{message.video.file_id}"
    elif message.document:
        media = f"doc:{message.document.file_id}"

    await state.update_data(desc_text=desc, media=[media] if media else [])

    await message.answer(
        "–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å.\n\n"
        "<i>–£–∫–∞–∑—ã–≤–∞—è —Ç–µ–ª–µ—Ñ–æ–Ω, –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫ –æ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ.</i>",
        reply_markup=contact_share_kb(),
    )
    await state.set_state(Flow.phone)

# ---- —Ç–µ–ª–µ—Ñ–æ–Ω: –ø–æ–¥–µ–ª–∏—Ç—å—Å—è/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å/–≤–≤–µ—Å—Ç–∏
@dp.message(Flow.phone, F.contact)
async def on_phone_contact(message: Message, state: FSMContext):
    await finalize_complaint(message, state, phone=message.contact.phone_number)

@dp.message(Flow.phone, F.text.casefold() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def on_phone_skip(message: Message, state: FSMContext):
    await finalize_complaint(message, state, phone=None)

@dp.message(Flow.phone)
async def on_phone_text(message: Message, state: FSMContext):
    await finalize_complaint(message, state, phone=(message.text or "").strip())

async def finalize_complaint(message: Message, state: FSMContext, phone: str | None):
    data = await state.get_data()
    salon_key = data.get("salon")
    salon_name = SALONS[salon_key]["name"] if salon_key else "‚Äî"
    consent = bool(phone)  # —Ç–µ–ª–µ—Ñ–æ–Ω —É–∫–∞–∑–∞–Ω => —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫: –î–∞

    log = (
        "üö® –ñ–∞–ª–æ–±–∞\n"
        f"–°–∞–ª–æ–Ω: {salon_name}\n"
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫/–º–µ—Å—Ç–æ: {data.get('master_info') or '‚Äî'}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('desc_text') or '‚Äî'}\n"
        f"–ú–µ–¥–∏–∞: {1 if data.get('media') else 0} –≤–ª–æ–∂.\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone or '‚Äî'}\n"
        f"–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫: {'–î–∞' if consent else '–ù–µ—Ç'}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_username(message.from_user)}"
    )
    await admin_log(log)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. "
        + ("–£–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è." if consent else "–ú—ã —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –ø–æ —Ñ–∞–∫—Ç—É –æ–±—Ä–∞—â–µ–Ω–∏—è.")
    )
    await state.clear()

# ========= Help =========
@dp.message(Command("help"))
async def on_help(message: Message, state: FSMContext):
    deep = "\n".join(
        f"‚Ä¢ {s['name']}: https://t.me/{BOT_USERNAME}?start={key}"
        for key, s in SALONS.items()
    )
    await message.answer(
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –∂–∞–ª–æ–±—ã –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã.\n\n"
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "‚Äî /start ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ñ–∞–ª–æ–±–∞/–û—Ç–∑—ã–≤)\n"
        "‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω\n"
        "‚Äî —Å–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º\n\n"
        "–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ —Å–∞–ª–æ–Ω–∞–º:\n" + deep
    )

# ========= –ú–∏–Ω–∏-–≤–µ–±—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–ø—Ç–∞–π–º–∞ =========
async def handle(_):
    return web.Response(text="OK")

async def start_keepalive():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    logger.info("Keepalive web server running on :8080")

# ========= main =========
async def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN is not set")
    await admin_log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–∞–ª–æ–±—ã/–æ—Ç–∑—ã–≤—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞.")
    await asyncio.gather(
        dp.start_polling(bot),
        start_keepalive(),
    )

if __name__ == "__main__":
    asyncio.run(main())
