# -*- coding: utf-8 -*-
"""
Telegram feedback bot (aiogram v3) –¥–ª—è —Å–µ—Ç–∏ –¶–∏—Ä—é–ª—å–Ω–∏–∫–™
–í–µ—Ä—Å–∏—è: Replit-ready

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
‚úÖ –û–¥–∏–Ω –≥–æ—Ä–æ–¥, 3 —Å–∞–ª–æ–Ω–∞
‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ ‚Üí —Å—Å—ã–ª–∫–∏ –Ø–Ω–¥–µ–∫—Å / 2–ì–ò–° / VK
‚úÖ –ñ–∞–ª–æ–±–∞ ‚Üí –º–∞—Å—Ç–µ—Ä (–∑–Ω–∞—é/–Ω–µ –ø–æ–º–Ω—é) ‚Üí –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí –æ–ø–∏—Å–∞–Ω–∏–µ + —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ ‚Üí —Ç–µ–ª–µ—Ñ–æ–Ω (–ø–æ –∂–µ–ª–∞–Ω–∏—é) ‚Üí —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫
‚úÖ –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø—É Telegram (ADMIN_CHAT_ID)
"""

import asyncio
import logging
import os
from typing import Optional
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiohttp import web

logging.basicConfig(level=logging.INFO)

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
BOT_TOKEN = "8149079701:AAEFH-usiimRlsH0FYFqIeTVRhLCTwdSL9E"
ADMIN_CHAT_ID = -4956523911
BOT_USERNAME = "tsiryulnik_feedback_bot"

VK_COMMON_URL = "https://vk.com/salonseverodvinsk"

SALONS = [
    {
        "id": "s1",
        "name": "–õ–æ–º–æ–Ω–æ—Å–æ–≤–∞, 85/1",
        "yandex": "https://yandex.ru/maps/-/CLbM5BiA",
        "two_gis": "https://go.2gis.com/U9V8N",
        "vk": VK_COMMON_URL,
    },
    {
        "id": "s2",
        "name": "–ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞, 14",
        "yandex": "https://yandex.ru/maps/-/CLbMBIyc",
        "two_gis": "https://go.2gis.com/s3pVH",
        "vk": VK_COMMON_URL,
    },
    {
        "id": "s3",
        "name": "–ú–∏—Ä–∞, 8",
        "yandex": "https://yandex.ru/maps/-/CLbMB4YC",
        "two_gis": "https://go.2gis.com/PJtRI",
        "vk": VK_COMMON_URL,
    },
]

SALON_BY_ID = {s["id"]: s for s in SALONS}

CATEGORIES = [
    "–ì—Ä—É–±–æ–µ –æ–±—â–µ–Ω–∏–µ",
    "–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
    "–ì—Ä—è–∑–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ",
    "–ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥–∏",
    "–ù–∞—Ä—É—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏",
    "–î—Ä—É–≥–æ–µ",
]


class Flow(StatesGroup):
    salon = State()
    action = State()
    know_master = State()
    master_name = State()
    categories = State()
    description = State()
    phone = State()
    consent = State()


# ==== –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ====
def salons_kb():
    kb = InlineKeyboardBuilder()
    for s in SALONS:
        kb.button(text=s["name"], callback_data=f"salon:{s['id']}")
    kb.adjust(1)
    return kb.as_markup()


def action_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É", callback_data="act:complaint")
    kb.button(text="–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤", callback_data="act:praise")
    kb.adjust(1)
    return kb.as_markup()


def praise_kb(salon_id: str):
    s = SALON_BY_ID[salon_id]
    kb = InlineKeyboardBuilder()
    kb.button(text="–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã", url=s["yandex"])
    kb.button(text="2–ì–ò–°", url=s["two_gis"])
    kb.button(text="VK", url=s["vk"])
    kb.adjust(1)
    return kb.as_markup()


def know_master_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–∞, –∑–Ω–∞—é (–Ω–∞–ø–∏—à—É)", callback_data="km:yes")
    kb.button(text="–ù–µ –ø–æ–º–Ω—é", callback_data="km:no")
    kb.adjust(1)
    return kb.as_markup()


def yes_no_kb(prefix: str = "cons"):
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–∞", callback_data=f"{prefix}:yes")
    kb.button(text="–ù–µ—Ç", callback_data=f"{prefix}:no")
    kb.adjust(2)
    return kb.as_markup()


def contact_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)],
            [KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
        selective=True,
    )


def categories_hint() -> str:
    return (
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ).\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
        + "\n".join(f"‚Ä¢ {c}" for c in CATEGORIES)
    )


async def send_admin_log(bot: Bot, text: str):
    try:
        await bot.send_message(ADMIN_CHAT_ID, text)
    except Exception as e:
        logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")


# ==== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ====
bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()


@dp.message(CommandStart())
async def start_cmd(message: Message, state: FSMContext):
    payload = message.text.split(maxsplit=1)
    preselected_salon: Optional[str] = None
    if len(payload) == 2:
        arg = payload[1].strip()
        if arg in SALON_BY_ID:
            preselected_salon = arg
    await state.clear()
    if preselected_salon:
        await state.update_data(salon_id=preselected_salon)
        s = SALON_BY_ID[preselected_salon]
        await message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–ª–æ–Ω: <b>{s['name']}</b>.\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=action_kb(),
        )
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω:", reply_markup=salons_kb())
        await state.set_state(Flow.salon)


@dp.callback_query(F.data.startswith("salon:"))
async def pick_salon(cb: CallbackQuery, state: FSMContext):
    salon_id = cb.data.split(":", 1)[1]
    await state.update_data(salon_id=salon_id)
    s = SALON_BY_ID[salon_id]
    await cb.message.edit_text(
        f"–°–∞–ª–æ–Ω: <b>{s['name']}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=action_kb()
    )
    await cb.answer()
    await state.set_state(Flow.action)


@dp.callback_query(F.data.startswith("act:"))
async def pick_action(cb: CallbackQuery, state: FSMContext):
    action = cb.data.split(":", 1)[1]
    data = await state.get_data()
    salon_id = data.get("salon_id")
    if action == "praise":
        await cb.message.edit_text(
            "–°–ø–∞—Å–∏–±–æ! –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤:",
            reply_markup=praise_kb(salon_id),
        )
        await send_admin_log(
            bot,
            f"üëç –ü–æ—Ö–≤–∞–ª–∞\n–°–∞–ª–æ–Ω: {SALON_BY_ID[salon_id]['name']}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{cb.from_user.username or cb.from_user.id}",
        )
        await cb.answer()
    else:
        await cb.message.edit_text("–í—ã –∑–Ω–∞–µ—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞?", reply_markup=know_master_kb())
        await state.set_state(Flow.know_master)
        await cb.answer()


@dp.callback_query(F.data.startswith("km:"))
async def know_master(cb: CallbackQuery, state: FSMContext):
    yn = cb.data.split(":", 1)[1]
    if yn == "yes":
        await cb.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞ (–∫–∞–∫ –Ω–∞ –±–µ–π–¥–∂–∏–∫–µ):")
        await state.set_state(Flow.master_name)
    else:
        await state.update_data(master_name=None)
        await cb.message.edit_text(categories_hint())
        await state.set_state(Flow.categories)
    await cb.answer()


@dp.message(Flow.master_name)
async def set_master_name(message: Message, state: FSMContext):
    name = (message.text or "").strip()
    await state.update_data(master_name=name)
    await message.answer(categories_hint())
    await state.set_state(Flow.categories)


@dp.message(Flow.categories)
async def set_categories(message: Message, state: FSMContext):
    chosen = [c.strip() for c in (message.text or "").split(",") if c.strip()]
    valid = [c if c in CATEGORIES else f"–î—Ä—É–≥–æ–µ: {c}" for c in chosen]
    await state.update_data(categories=valid)
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.\n\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ: <b>–ì–æ—Ç–æ–≤–æ</b>."
    )
    await state.set_state(Flow.description)


@dp.message(Flow.description, F.text.lower() == "–≥–æ—Ç–æ–≤–æ")
async def finish_description_keyword(message: Message, state: FSMContext):
    await ask_phone(message, state)


@dp.message(Flow.description)
async def collect_description(message: Message, state: FSMContext):
    data = await state.get_data()
    desc = data.get("desc", "")
    media = data.get("media", [])
    if message.photo:
        media.append(f"photo:{message.photo[-1].file_id}")
    elif message.video:
        media.append(f"video:{message.video.file_id}")
    elif message.document:
        media.append(f"doc:{message.document.file_id}")
    part = message.caption or message.text or ""
    if part:
        desc = (desc + "\n" + part).strip()
    await state.update_data(desc=desc, media=media)


async def ask_phone(message: Message, state: FSMContext):
    await message.answer(
        "–ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)",
        reply_markup=contact_kb(),
    )
    await state.set_state(Flow.phone)


@dp.message(Flow.phone, F.contact)
async def got_contact(message: Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    await ask_consent(message, state)


@dp.message(Flow.phone, F.text.casefold() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_phone(message: Message, state: FSMContext):
    await state.update_data(phone=None)
    await ask_consent(message, state)


async def ask_consent(message: Message, state: FSMContext):
    await message.answer(
        "–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã –Ω–∞ –∑–≤–æ–Ω–æ–∫ –æ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞?",
        reply_markup=yes_no_kb("cons"),
    )
    await state.set_state(Flow.consent)


@dp.callback_query(Flow.consent, F.data.startswith("cons:"))
async def set_consent(cb: CallbackQuery, state: FSMContext):
    consent = cb.data.endswith("yes")
    await state.update_data(consent=consent)
    data = await state.get_data()
    salon = SALON_BY_ID[data["salon_id"]]
    user = cb.from_user
    log_lines = [
        "üö® –ñ–∞–ª–æ–±–∞",
        f"–°–∞–ª–æ–Ω: {salon['name']}",
        f"–ú–∞—Å—Ç–µ—Ä: {data.get('master_name') or '‚Äî'}",
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(data.get('categories', [])) or '‚Äî'}",
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('desc', '‚Äî')}",
        f"–ú–µ–¥–∏–∞: {len(data.get('media', []))} –≤–ª–æ–∂.",
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone') or '‚Äî'}",
        f"–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫: {'–î–∞' if consent else '–ù–µ—Ç'}",
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or user.id}",
    ]
    await send_admin_log(bot, "\n".join(log_lines))
    await cb.message.edit_text(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. –£–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
        if consent
        else "–°–ø–∞—Å–∏–±–æ! –ñ–∞–ª–æ–±–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. –ú—ã —Ä–∞–∑–±–µ—Ä—ë–º—Å—è."
    )
    await state.clear()
    await cb.answer()


async def start_keepalive_app():
    async def handle(_):
        return web.Response(text="OK")

    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()


async def main():
    await send_admin_log(bot, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–∞–ª–æ–±—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞.")
    await asyncio.gather(dp.start_polling(bot), start_keepalive_app())


if __name__ == "__main__":
    asyncio.run(main())
