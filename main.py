import asyncio
import logging
import os
from typing import Optional

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiohttp import web

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "8149079701:AAEFH-usiimRlsH0FYFqIeTVRhLCTwdSL9E"
ADMIN_CHAT_ID = -4956523911
BOT_USERNAME = "tsiryulnik_feedback_bot"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === –°–ø–∏—Å–æ–∫ —Å–∞–ª–æ–Ω–æ–≤ ===
salons = {
    "s1": {
        "name": "–õ–æ–º–æ–Ω–æ—Å–æ–≤–∞, 85/1",
        "yandex": "https://yandex.ru/maps/-/CLbM5BiA",
        "gis": "https://go.2gis.com/U9V8N",
    },
    "s2": {
        "name": "–ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞, 14",
        "yandex": "https://yandex.ru/maps/-/CLbMBIyc",
        "gis": "https://go.2gis.com/s3pVH",
    },
    "s3": {
        "name": "–ú–∏—Ä–∞, 8",
        "yandex": "https://yandex.ru/maps/-/CLbMB4YC",
        "gis": "https://go.2gis.com/PJtRI",
    },
}

VK_LINK = "https://vk.com/salonseverodvinsk"

# === –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ===
class FeedbackForm(StatesGroup):
    salon = State()
    feedback_type = State()
    master_name = State()
    issue_text = State()
    phone = State()
    consent = State()


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    for key, s in salons.items():
        builder.button(text=s["name"], callback_data=f"salon_{key}")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω, –≥–¥–µ –≤—ã –±—ã–ª–∏:",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(FeedbackForm.salon)


# === –í—ã–±–æ—Ä —Å–∞–ª–æ–Ω–∞ ===
@dp.callback_query(F.data.startswith("salon_"))
async def choose_salon(callback: CallbackQuery, state: FSMContext):
    salon_key = callback.data.split("_")[1]
    await state.update_data(salon=salon_key)

    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É", callback_data="type_negative")
    builder.button(text="–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤", callback_data="type_positive")

    await callback.message.edit_text(
        "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤?",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(FeedbackForm.feedback_type)


# === –í–µ—Ç–∫–∞: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ ===
@dp.callback_query(F.data == "type_positive")
async def positive_feedback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    salon = salons[data["salon"]]
    text = (
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –æ—Å—Ç–∞–≤–∏—Ç—å:\n\n"
        f"üìç {salon['name']}\n\n"
        f"<a href='{salon['yandex']}'>üü° –Ø–Ω–¥–µ–∫—Å</a>\n"
        f"<a href='{salon['gis']}'>üü¢ 2–ì–ò–°</a>\n"
        f"<a href='{VK_LINK}'>üîµ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</a>"
    )
    await callback.message.edit_text(text, disable_web_page_preview=True)
    await state.clear()


# === –í–µ—Ç–∫–∞: –∂–∞–ª–æ–±–∞ ===
@dp.callback_query(F.data == "type_negative")
async def negative_feedback(callback: CallbackQuery, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ –ø–æ–º–Ω—é")]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await callback.message.answer(
        "–í—ã –∑–Ω–∞–µ—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞? (—É–∫–∞–∑–∞–Ω–æ –Ω–∞ –±–µ–π–¥–∂–∏–∫–µ)", reply_markup=kb
    )
    await state.set_state(FeedbackForm.master_name)


@dp.message(FeedbackForm.master_name)
async def process_master_name(message: Message, state: FSMContext):
    name = message.text if message.text != "–ù–µ –ø–æ–º–Ω—é" else None
    await state.update_data(master_name=name)

    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Äî –ì—Ä—É–±–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ\n‚Äî –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥–∏\n‚Äî –ì—Ä—è–∑–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ\n‚Äî –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å")]], resize_keyboard=True
        ),
    )
    await state.set_state(FeedbackForm.issue_text)


@dp.message(FeedbackForm.issue_text)
async def process_issue_text(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("–û—Ç–º–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ /start")
        await state.clear()
        return

    await state.update_data(issue_text=message.text)
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª).")
    await state.set_state(FeedbackForm.phone)


@dp.message(FeedbackForm.phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞, –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ")],
            [KeyboardButton(text="–ù–µ—Ç, —Ç–æ–ª—å–∫–æ —É—á—Ç–∏—Ç–µ –º–æ–π –æ—Ç–∑—ã–≤")],
        ],
        resize_keyboard=True,
    )
    await message.answer("–ú–æ–∂–Ω–æ –ª–∏ –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π?", reply_markup=kb)
    await state.set_state(FeedbackForm.consent)


@dp.message(FeedbackForm.consent)
async def process_consent(message: Message, state: FSMContext):
    data = await state.get_data()
    salon = salons[data["salon"]]

    complaint = (
        f"‚ö†Ô∏è <b>–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞</b>\n\n"
        f"üè† –°–∞–ª–æ–Ω: {salon['name']}\n"
        f"üë§ –ú–∞—Å—Ç–µ—Ä: {data.get('master_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('issue_text')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"‚òëÔ∏è –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫: {message.text}\n"
    )

    await bot.send_message(ADMIN_CHAT_ID, complaint)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–æ–æ–±—â–∏–ª–∏ –æ –ø—Ä–æ–±–ª–µ–º–µ. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏ üôè",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="/start")]], resize_keyboard=True
        ),
    )
    await state.clear()


# === –ú–∏–Ω–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–ø—Ç–∞–π–º–∞ ===
async def handle(request):
    return web.Response(text="Bot is running")

def setup_web_server():
    app = web.Application()
    app.router.add_get("/", handle)
    return app


# === –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
async def main():
    app = setup_web_server()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–∞–ª–æ–±—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞.")
    await bot.send_message(ADMIN_CHAT_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–∞–ª–æ–±—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
